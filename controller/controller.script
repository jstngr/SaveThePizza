local rendercam = require("rendercam.rendercam")

local UNITVECTOR_UP = vmath.vector3(0, 1, 0)
local PLAYER_URL = "/game/player"

local MSG_ENEMY_DETLETED = hash("enemy_deleted") 

local enemy_counter = 0
local last_spawn_site = 0

function spawn_enemy(x, y, z)
	local enemy = factory.create("/game/enemy_factory#enemy", vmath.vector3(x, y, z), nil, { }, 1)
	local shadow = factory.create("/game/enemy_shadow_factory#enemy_shadow", vmath.vector3(x, y, z), nil, { }, 1.4)
	
	msg.post(shadow, "set_parent", { parent_id = enemy})
	msg.post(enemy, "set_shadow", { shadow_id = shadow})

	enemy_counter = enemy_counter + 1
end

function handle_spawn_routine()
	local site = math.random(1, 4) 
	site = ((last_spawn_site + 1) % 5)
	-- if site == last_spawn_site then
	-- 	return
	-- end
	last_spawn_site = site
	print(last_spawn_site)
	local x, y, z
	local player_pos = go.get_position(PLAYER_URL)
	if site == 1 then -- oben
		y = player_pos.y + 1000
		x = player_pos.x + math.random(-100, 730)
	elseif site == 3 then -- links
		x = player_pos.x - 800
		y = player_pos.y + math.random(-100, 1250)
	elseif site == 2 then -- unten
		y = player_pos.y - 1000
		x = player_pos.x + math.random(-100, 730)
	elseif site == 4 then -- rechts
		x = player_pos.x + 800
		y = player_pos.y + math.random(-100, 1250)
	else
		return
	end
	spawn_enemy(x, y, 0)
end

function init(self)
	-- print(msg.url())

	rendercam.follow(PLAYER_URL, false, "/camera")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)


	-- enemy  spawn controll:
	if enemy_counter < 10 then
		handle_spawn_routine()
	end
	
end

function on_message(self, message_id, message, sender)
	if message_id == MSG_ENEMY_DETLETED then
		enemy_counter = enemy_counter - 1
	end	
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
